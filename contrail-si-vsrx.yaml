heat_template_version: 2015-04-30

parameters:
  template_VirtualNetwork_1:
    type: string
    description: Name of management network to be created
  template_VirtualNetwork_2:
    type: string
    description: Name of left network to be created
  template_VirtualNetwork_3:
    type: string
    description: Name of right network to be created

  st_name:
    type: string
    label: Service template fq name
    description: Service template for port tuple
  st_version:
    type: string
    description: Indicates service version
  st_service_mode:
    type: string
    description: service mode
  st_service_type:
    type: string
    description: service type
  st_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_interface_type_2:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_interface_type_3:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_availability_zone:
    type: string
    description: Indicates availability zone is enabled
  st_ordered_interfaces:
    type: string
    description: Indicates service interfaces are ordered
  st_virtualization_type:
    type: string
    description: Indicates virtualization type
  st_domain:
    type: string
    description: domain for the ServiceTemplate

  service_instance_name:
    type: string
    label: Service instance name
    description: Service instance for port tuple
  si_ha_mode:
    type: string
    description: HA Mode of the Service Instance

  mgmt_ip:
    type: string

  flavor:
    type: string
    description: Flavor of the end VMs
  image:
    type: string
    description: Name of the end VM image
  image_2:
    type: string
    description: Name of the end VM image
  name_1:
    type: string
    description: Name of the left VM
  name_2:
    type: string
    description: Name of the right VM
  name_3:
    type: string
    description: Name of the right VM

resources:

  template_ServiceTemplate:
    type: OS::ContrailV2::ServiceTemplate
    properties:
      name: { get_param: st_name }
      service_template_properties:
        {
          service_template_properties_version: { get_param: st_version },
          service_template_properties_service_mode: { get_param: st_service_mode },
          service_template_properties_service_type: { get_param: st_service_type },
          service_template_properties_interface_type:
            [
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_2 },
              },
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_3 },
              }
            ],
          service_template_properties_ordered_interfaces: { get_param: st_ordered_interfaces },
          service_template_properties_service_virtualization_type: { get_param: st_virtualization_type },
        }
      domain: { get_param: st_domain }

  template_ServiceInstance:
    type: OS::ContrailV2::ServiceInstance
    depends_on: [ template_ServiceTemplate ]
    properties:
      name: { get_param: service_instance_name }
      service_instance_properties:
        {
          service_instance_properties_interface_list:
            [
              {
              service_instance_properties_interface_list_virtual_network: { get_param: template_VirtualNetwork_2 }

              },
              {
              service_instance_properties_interface_list_virtual_network: { get_param: template_VirtualNetwork_3 }

              }
            ],
      service_instance_properties_ha_mode: { get_param: si_ha_mode }
        }
      service_template_refs: [{ get_resource: template_ServiceTemplate }]

  template_PortTuple1:
    type: OS::ContrailV2::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_PortTuple2:
    type: OS::ContrailV2::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_PortTuple3:
    type: OS::ContrailV2::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_VirtualMachineInterface_1:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_1 },
        }
      virtual_network_refs: [{ get_param: template_VirtualNetwork_1 }]

  template_VirtualMachineInterface_2:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple1 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_2 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple1 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_2 }]

  template_VirtualMachineInterface_3:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple1 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_3 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple1 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_3 }]

  template_VirtualMachineInterface_4:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_1 },
        }
      virtual_network_refs: [{ get_param: template_VirtualNetwork_1 }]

  template_VirtualMachineInterface_5:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple2 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_2 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple2 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_2 }]

  template_VirtualMachineInterface_6:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple2 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_3 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple2 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_3 }]

  template_VirtualMachineInterface_7:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_1 },
        }
      virtual_network_refs: [{ get_param: template_VirtualNetwork_1 }]

  template_VirtualMachineInterface_8:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple3 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_2 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple3 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_2 }]

  template_VirtualMachineInterface_9:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple3 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_3 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple3 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_3 }]

  template_InstanceIp_1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_1 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_1 }]

  template_InstanceIp_2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_2 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_2 }]

  template_InstanceIp_3:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_3 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_3 }]

  template_InstanceIp_4:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_4 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_4 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_1 }]

  template_InstanceIp_5:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_5 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_5 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_2 }]

  template_InstanceIp_6:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_6 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_6 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_3 }]

  template_InstanceIp_7:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_7 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_7 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_1 }]
      instance_ip_address: { get_param:  mgmt_ip }

  template_InstanceIp_8:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_8 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_8 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_2 }]

  template_InstanceIp_9:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_9 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_9 }]
      virtual_network_refs: [{ get_param: template_VirtualNetwork_3 }]


  instance1:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2, template_InstanceIp_3 ]
    properties:
      name: {get_param: name_1 }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }
        - port: { get_resource: template_VirtualMachineInterface_2 }
        - port: { get_resource: template_VirtualMachineInterface_3 }

  instance2:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_4, template_InstanceIp_5, template_InstanceIp_6 ]
    properties:
      name: {get_param: name_2 }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_4 }
        - port: { get_resource: template_VirtualMachineInterface_5 }
        - port: { get_resource: template_VirtualMachineInterface_6 }

  instance3:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_7, template_InstanceIp_8, template_InstanceIp_9 ]
    properties:
      name: {get_param: name_3 }
      image: { get_param: image_2 }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_7 }
        - port: { get_resource: template_VirtualMachineInterface_8 }
        - port: { get_resource: template_VirtualMachineInterface_9 }

